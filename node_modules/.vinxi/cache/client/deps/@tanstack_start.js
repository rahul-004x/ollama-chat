import {
  serverFnPayloadTypeHeader,
  serverFnReturnTypeHeader
} from "./chunk-256BUK2O.js";
import {
  RouterProvider,
  ScriptOnce,
  invariant,
  isPlainObject,
  isRedirect,
  useRouter,
  useRouterState
} from "./chunk-C454DNXS.js";
import {
  require_react_dom
} from "./chunk-EM6OVH4K.js";
import {
  require_jsx_runtime
} from "./chunk-HLS4TUFV.js";
import {
  require_react
} from "./chunk-XTFUJAKR.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/.pnpm/jsesc@3.0.2/node_modules/jsesc/jsesc.js
var require_jsesc = __commonJS({
  "node_modules/.pnpm/jsesc@3.0.2/node_modules/jsesc/jsesc.js"(exports, module) {
    "use strict";
    var object = {};
    var hasOwnProperty = object.hasOwnProperty;
    var forOwn = (object2, callback) => {
      for (const key in object2) {
        if (hasOwnProperty.call(object2, key)) {
          callback(key, object2[key]);
        }
      }
    };
    var extend = (destination, source) => {
      if (!source) {
        return destination;
      }
      forOwn(source, (key, value) => {
        destination[key] = value;
      });
      return destination;
    };
    var forEach = (array, callback) => {
      const length = array.length;
      let index = -1;
      while (++index < length) {
        callback(array[index]);
      }
    };
    var fourHexEscape = (hex) => {
      return "\\u" + ("0000" + hex).slice(-4);
    };
    var hexadecimal = (code, lowercase) => {
      let hexadecimal2 = code.toString(16);
      if (lowercase) return hexadecimal2;
      return hexadecimal2.toUpperCase();
    };
    var toString = object.toString;
    var isArray = Array.isArray;
    var isBuffer = (value) => {
      return typeof Buffer === "function" && Buffer.isBuffer(value);
    };
    var isObject = (value) => {
      return toString.call(value) == "[object Object]";
    };
    var isString = (value) => {
      return typeof value == "string" || toString.call(value) == "[object String]";
    };
    var isNumber = (value) => {
      return typeof value == "number" || toString.call(value) == "[object Number]";
    };
    var isFunction = (value) => {
      return typeof value == "function";
    };
    var isMap = (value) => {
      return toString.call(value) == "[object Map]";
    };
    var isSet = (value) => {
      return toString.call(value) == "[object Set]";
    };
    var singleEscapes = {
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "	": "\\t"
      // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
      // '\v': '\\x0B'
    };
    var regexSingleEscape = /[\\\b\f\n\r\t]/;
    var regexDigit = /[0-9]/;
    var regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    var escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
    var escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;
    var jsesc3 = (argument, options) => {
      const increaseIndentation = () => {
        oldIndent = indent;
        ++options.indentLevel;
        indent = options.indent.repeat(options.indentLevel);
      };
      const defaults = {
        "escapeEverything": false,
        "minimal": false,
        "isScriptContext": false,
        "quotes": "single",
        "wrap": false,
        "es6": false,
        "json": false,
        "compact": true,
        "lowercaseHex": false,
        "numbers": "decimal",
        "indent": "	",
        "indentLevel": 0,
        "__inline1__": false,
        "__inline2__": false
      };
      const json2 = options && options.json;
      if (json2) {
        defaults.quotes = "double";
        defaults.wrap = true;
      }
      options = extend(defaults, options);
      if (options.quotes != "single" && options.quotes != "double" && options.quotes != "backtick") {
        options.quotes = "single";
      }
      const quote = options.quotes == "double" ? '"' : options.quotes == "backtick" ? "`" : "'";
      const compact = options.compact;
      const lowercaseHex = options.lowercaseHex;
      let indent = options.indent.repeat(options.indentLevel);
      let oldIndent = "";
      const inline1 = options.__inline1__;
      const inline2 = options.__inline2__;
      const newLine = compact ? "" : "\n";
      let result;
      let isEmpty = true;
      const useBinNumbers = options.numbers == "binary";
      const useOctNumbers = options.numbers == "octal";
      const useDecNumbers = options.numbers == "decimal";
      const useHexNumbers = options.numbers == "hexadecimal";
      if (json2 && argument && isFunction(argument.toJSON)) {
        argument = argument.toJSON();
      }
      if (!isString(argument)) {
        if (isMap(argument)) {
          if (argument.size == 0) {
            return "new Map()";
          }
          if (!compact) {
            options.__inline1__ = true;
            options.__inline2__ = false;
          }
          return "new Map(" + jsesc3(Array.from(argument), options) + ")";
        }
        if (isSet(argument)) {
          if (argument.size == 0) {
            return "new Set()";
          }
          return "new Set(" + jsesc3(Array.from(argument), options) + ")";
        }
        if (isBuffer(argument)) {
          if (argument.length == 0) {
            return "Buffer.from([])";
          }
          return "Buffer.from(" + jsesc3(Array.from(argument), options) + ")";
        }
        if (isArray(argument)) {
          result = [];
          options.wrap = true;
          if (inline1) {
            options.__inline1__ = false;
            options.__inline2__ = true;
          }
          if (!inline2) {
            increaseIndentation();
          }
          forEach(argument, (value) => {
            isEmpty = false;
            if (inline2) {
              options.__inline2__ = false;
            }
            result.push(
              (compact || inline2 ? "" : indent) + jsesc3(value, options)
            );
          });
          if (isEmpty) {
            return "[]";
          }
          if (inline2) {
            return "[" + result.join(", ") + "]";
          }
          return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
        } else if (isNumber(argument)) {
          if (json2) {
            return JSON.stringify(argument);
          }
          if (useDecNumbers) {
            return String(argument);
          }
          if (useHexNumbers) {
            let hexadecimal2 = argument.toString(16);
            if (!lowercaseHex) {
              hexadecimal2 = hexadecimal2.toUpperCase();
            }
            return "0x" + hexadecimal2;
          }
          if (useBinNumbers) {
            return "0b" + argument.toString(2);
          }
          if (useOctNumbers) {
            return "0o" + argument.toString(8);
          }
        } else if (!isObject(argument)) {
          if (json2) {
            return JSON.stringify(argument) || "null";
          }
          return String(argument);
        } else {
          result = [];
          options.wrap = true;
          increaseIndentation();
          forOwn(argument, (key, value) => {
            isEmpty = false;
            result.push(
              (compact ? "" : indent) + jsesc3(key, options) + ":" + (compact ? "" : " ") + jsesc3(value, options)
            );
          });
          if (isEmpty) {
            return "{}";
          }
          return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
        }
      }
      const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
      result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
        if (pair) {
          if (options.minimal) return pair;
          const first = pair.charCodeAt(0);
          const second = pair.charCodeAt(1);
          if (options.es6) {
            const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
            const hex2 = hexadecimal(codePoint, lowercaseHex);
            return "\\u{" + hex2 + "}";
          }
          return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
        }
        if (lone) {
          return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
        }
        if (char == "\0" && !json2 && !regexDigit.test(string.charAt(index + 1))) {
          return "\\0";
        }
        if (quoteChar) {
          if (quoteChar == quote || options.escapeEverything) {
            return "\\" + quoteChar;
          }
          return quoteChar;
        }
        if (regexSingleEscape.test(char)) {
          return singleEscapes[char];
        }
        if (options.minimal && !regexWhitespace.test(char)) {
          return char;
        }
        const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
        if (json2 || hex.length > 2) {
          return fourHexEscape(hex);
        }
        return "\\x" + ("00" + hex).slice(-2);
      });
      if (quote == "`") {
        result = result.replace(/\$\{/g, "\\${");
      }
      if (options.isScriptContext) {
        result = result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json2 ? "\\u003C!--" : "\\x3C!--");
      }
      if (options.wrap) {
        result = quote + result + quote;
      }
      return result;
    };
    jsesc3.version = "3.0.2";
    module.exports = jsesc3;
  }
});

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/Asset.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function Asset({ tag, attrs, children }) {
  switch (tag) {
    case "title":
      return (0, import_jsx_runtime.jsx)("title", { ...attrs, suppressHydrationWarning: true, children });
    case "meta":
      return (0, import_jsx_runtime.jsx)("meta", { ...attrs, suppressHydrationWarning: true });
    case "link":
      return (0, import_jsx_runtime.jsx)("link", { ...attrs, suppressHydrationWarning: true });
    case "style":
      return (0, import_jsx_runtime.jsx)(
        "style",
        {
          ...attrs,
          dangerouslySetInnerHTML: { __html: children }
        }
      );
    case "script":
      if (attrs && attrs.src) {
        return (0, import_jsx_runtime.jsx)("script", { ...attrs, suppressHydrationWarning: true });
      }
      if (typeof children === "string")
        return (0, import_jsx_runtime.jsx)(
          "script",
          {
            ...attrs,
            dangerouslySetInnerHTML: {
              __html: children
            },
            suppressHydrationWarning: true
          }
        );
      return null;
    default:
      return null;
  }
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/createServerFn.js
function createServerFn(method, fn) {
  const compiledFn = fn;
  invariant(
    compiledFn.url,
    `createServerFn must be called with a function that is marked with the 'use server' pragma. Are you using the @tanstack/router-plugin/vite ?`
  );
  return Object.assign(
    async (payload, opts) => {
      return compiledFn({
        method,
        payload: payload || void 0,
        requestInit: opts == null ? void 0 : opts.requestInit
      });
    },
    {
      url: fn.url
    }
  );
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/DehydrateRouter.js
function DehydrateRouter() {
  return null;
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/json.js
function json(payload, opts) {
  const status = (opts == null ? void 0 : opts.status) || 200;
  const statusText = opts == null ? void 0 : opts.statusText;
  return new Response(JSON.stringify(payload), {
    status,
    statusText,
    headers: {
      "Content-Type": "application/json",
      [serverFnReturnTypeHeader]: "json",
      ...opts == null ? void 0 : opts.headers
    }
  });
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/Meta.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var import_jsesc = __toESM(require_jsesc(), 1);

// node_modules/.pnpm/@tanstack+react-cross-context@1.74.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@tanstack/react-cross-context/dist/esm/Context.js
var import_react = __toESM(require_react(), 1);
var Context = class _Context {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  static create() {
    if (!_Context.instance) {
      _Context.instance = new _Context();
    }
    return _Context.instance;
  }
  createContext(key, initialValue) {
    const context2 = (0, import_react.createContext)(initialValue);
    this.cache.set(key, context2);
    return context2;
  }
  get(key, initialValue) {
    return this.cache.get(key) || this.createContext(key, initialValue);
  }
};
var context = Context.create();
var context$1 = context;

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/Meta.js
var useMeta = () => {
  const router = useRouter();
  const routeMeta = useRouterState({
    select: (state) => {
      return state.matches.map((match) => match.meta).filter(Boolean);
    }
  });
  const meta = React.useMemo(() => {
    const resultMeta = [];
    const metaByName = {};
    let title;
    [...routeMeta].reverse().forEach((metas) => {
      [...metas].reverse().forEach((m) => {
        if (m.title) {
          if (!title) {
            title = {
              tag: "title",
              children: m.title
            };
          }
        } else {
          if (m.name) {
            if (metaByName[m.name]) {
              return;
            } else {
              metaByName[m.name] = true;
            }
          }
          resultMeta.push({
            tag: "meta",
            attrs: {
              ...m
            }
          });
        }
      });
    });
    if (title) {
      resultMeta.push(title);
    }
    resultMeta.reverse();
    return resultMeta;
  }, [routeMeta]);
  const links = useRouterState({
    select: (state) => state.matches.map((match) => match.links).filter(Boolean).flat(1).map((link) => ({
      tag: "link",
      attrs: {
        ...link
      }
    }))
  });
  const preloadMeta = useRouterState({
    select: (state) => {
      const preloadMeta2 = [];
      state.matches.map((match) => router.looseRoutesById[match.routeId]).forEach(
        (route) => {
          var _a, _b, _c;
          return (_c = (_b = (_a = router.manifest) == null ? void 0 : _a.routes[route.id]) == null ? void 0 : _b.preloads) == null ? void 0 : _c.filter(Boolean).forEach((preload) => {
            preloadMeta2.push({
              tag: "link",
              attrs: {
                rel: "modulepreload",
                href: preload
              }
            });
          });
        }
      );
      return preloadMeta2;
    }
  });
  return uniqBy(
    [...meta, ...preloadMeta, ...links],
    (d) => {
      return JSON.stringify(d);
    }
  );
};
var useMetaElements = () => {
  const router = useRouter();
  const meta = useMeta();
  const dehydratedCtx = React.useContext(
    context$1.get("TanStackRouterHydrationContext", {})
  );
  return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    (0, import_jsx_runtime2.jsx)("meta", { name: "tsr-meta" }),
    meta.map((asset, i) => (0, import_react2.createElement)(Asset, { ...asset, key: `tsr-meta-${JSON.stringify(asset)}` })),
    (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      (0, import_jsx_runtime2.jsx)(
        ScriptOnce,
        {
          log: false,
          children: `
__TSR__ = {
  matches: [],
  streamedValues: {},
  initMatch: (index) => {
    Object.entries(__TSR__.matches[index].extracted).forEach(([id, ex]) => {
      if (ex.type === 'stream') {
        let controller;
        ex.value = new ReadableStream({
          start(c) { controller = c; }
        })
        ex.value.controller = controller
      } else if (ex.type === 'promise') {
        let r, j
        ex.value = new Promise((r_, j_) => { r = r_, j = j_ })
        ex.resolve = r; ex.reject = j
      }
    })
  },
  cleanScripts: () => {
    document.querySelectorAll('.tsr-once').forEach((el) => {
      el.remove()
    })
  },
}`
        }
      ),
      (0, import_jsx_runtime2.jsx)(
        ScriptOnce,
        {
          children: `__TSR__.dehydrated = ${(0, import_jsesc.default)(
            router.options.transformer.stringify(dehydratedCtx),
            {
              isScriptContext: true,
              wrap: true,
              json: true
            }
          )}`
        }
      )
    ] }),
    (0, import_jsx_runtime2.jsx)("meta", { name: "/tsr-meta" })
  ] });
};
var Meta = ({ children }) => {
  const router = useRouter();
  const metaElements = useMetaElements();
  const [mounted, setMounted] = React.useState(false);
  React[typeof document !== "undefined" ? "useLayoutEffect" : "useEffect"](() => {
    if (typeof document === "undefined") {
      return;
    }
    const start = document.head.querySelector('meta[name="tsr-meta"]');
    const end = document.head.querySelector('meta[name="/tsr-meta"]');
    let current = start == null ? void 0 : start.nextElementSibling;
    while (current && current !== end) {
      const next = current.nextElementSibling;
      current.remove();
      current = next;
    }
    start == null ? void 0 : start.remove();
    end == null ? void 0 : end.remove();
    setMounted(true);
  }, []);
  const all = (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
    metaElements,
    children
  ] });
  if (router.isServer) {
    return all;
  }
  if (!mounted) {
    return null;
  }
  return (0, import_react_dom.createPortal)(all, document.head);
};
function Html({ children, ...props }) {
  const router = useRouter();
  if (!router.isServer) {
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children });
  }
  return (0, import_jsx_runtime2.jsx)("html", { children });
}
function Head({ children, ...props }) {
  const router = useRouter();
  if (!router.isServer) {
    return children;
  }
  return (0, import_jsx_runtime2.jsx)("head", { children });
}
function Body({ children, ...props }) {
  const router = useRouter();
  if (!router.isServer) {
    return children;
  }
  return (0, import_jsx_runtime2.jsx)("body", { children: (0, import_jsx_runtime2.jsx)("div", { id: "root", children }) });
}
function uniqBy(arr, fn) {
  const seen = /* @__PURE__ */ new Set();
  return arr.filter((item) => {
    const key = fn(item);
    if (seen.has(key)) {
      return false;
    }
    seen.add(key);
    return true;
  });
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/Scripts.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var Scripts = () => {
  const router = useRouter();
  const assetScripts = useRouterState({
    select: (state) => {
      const assetScripts2 = [];
      state.matches.map((match) => router.looseRoutesById[match.routeId]).forEach(
        (route) => {
          var _a, _b, _c;
          return (_c = (_b = (_a = router.manifest) == null ? void 0 : _a.routes[route.id]) == null ? void 0 : _b.assets) == null ? void 0 : _c.filter((d) => d.tag === "script").forEach((asset) => {
            assetScripts2.push({
              tag: "script",
              attrs: asset.attrs,
              children: asset.children
            });
          });
        }
      );
      return assetScripts2;
    }
  });
  const { scripts } = useRouterState({
    select: (state) => ({
      scripts: state.matches.map((match) => match.scripts).filter(Boolean).flat(1).map(({ children, ...script }) => ({
        tag: "script",
        attrs: {
          ...script,
          suppressHydrationWarning: true
        },
        children
      }))
    })
  });
  const allScripts = [...scripts, ...assetScripts];
  return (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: allScripts.map((asset, i) => (
    // eslint-disable-next-line @eslint-react/no-array-index-key
    (0, import_react3.createElement)(Asset, { ...asset, key: `tsr-scripts-${asset.tag}-${i}` })
  )) });
};

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/StartClient.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/serialization.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var React2 = __toESM(require_react(), 1);
var import_jsesc2 = __toESM(require_jsesc(), 1);
function afterHydrate({ router }) {
  router.state.matches.forEach((match) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const route = router.looseRoutesById[match.routeId];
    const dMatch = (_a = window.__TSR__) == null ? void 0 : _a.matches[match.index];
    if (dMatch) {
      const parentMatch = router.state.matches[match.index - 1];
      const parentContext = (parentMatch == null ? void 0 : parentMatch.context) ?? router.options.context ?? {};
      if (dMatch.__beforeLoadContext) {
        match.__beforeLoadContext = router.options.transformer.parse(
          dMatch.__beforeLoadContext
        );
        match.context = {
          ...parentContext,
          ...match.context,
          ...match.__beforeLoadContext
        };
      }
      if (dMatch.loaderData) {
        match.loaderData = router.options.transformer.parse(dMatch.loaderData);
      }
      const extracted = dMatch.extracted;
      if (extracted) {
        Object.entries(extracted).forEach(([_, ex]) => {
          if (ex.value instanceof Promise) {
            const og = ex.value;
            ex.value = og.then((data) => {
              return data;
            });
          }
          deepMutableSetByPath(match, ["loaderData", ...ex.path], ex.value);
        });
      }
    }
    const meta = match.status === "success" ? (_c = (_b = route.options).meta) == null ? void 0 : _c.call(_b, {
      matches: router.state.matches,
      match,
      params: match.params,
      loaderData: match.loaderData
    }) : void 0;
    Object.assign(match, {
      meta,
      links: (_e = (_d = route.options).links) == null ? void 0 : _e.call(_d),
      scripts: (_g = (_f = route.options).scripts) == null ? void 0 : _g.call(_f)
    });
  });
}
function deepMutableSetByPath(obj, path, value) {
  if (path.length === 1) {
    obj[path[0]] = value;
  }
  const [key, ...rest] = path;
  if (Array.isArray(obj)) {
    deepMutableSetByPath(obj[Number(key)], rest, value);
  } else if (isPlainObject(obj)) {
    deepMutableSetByPath(obj[key], rest, value);
  }
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/StartClient.js
var cleaned = false;
function StartClient(props) {
  var _a;
  if (!props.router.state.matches.length) {
    props.router.hydrate();
    afterHydrate({ router: props.router });
  }
  if (!cleaned) {
    cleaned = true;
    (_a = window.__TSR__) == null ? void 0 : _a.cleanScripts();
  }
  return (0, import_jsx_runtime5.jsx)(RouterProvider, { router: props.router });
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/headers.js
function toHeadersInstance(init) {
  if (init instanceof Headers) {
    return new Headers(init);
  } else if (Array.isArray(init)) {
    return new Headers(init);
  } else if (typeof init === "object") {
    return new Headers(init);
  } else {
    return new Headers();
  }
}
function mergeHeaders(...headers) {
  return headers.reduce((acc, header) => {
    const headersInstance = toHeadersInstance(header);
    for (const [key, value] of headersInstance.entries()) {
      acc.set(key, value);
    }
    return acc;
  }, new Headers());
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/renderRSC.js
var import_react4 = __toESM(require_react(), 1);
function renderRsc(input) {
  if ((0, import_react4.isValidElement)(input)) {
    return input;
  }
  if (typeof input === "object" && !input.state) {
    input.state = {
      status: "pending",
      promise: Promise.resolve().then(() => {
        invariant(false, "renderRSC() is coming soon!");
      }).then((element) => {
        input.state.value = element;
        input.state.status = "success";
      }).catch((err) => {
        input.state.status = "error";
        input.state.error = err;
      })
    };
  }
  if (input.state.status === "pending") {
    throw input.state.promise;
  }
  return input.state.value;
}

// node_modules/.pnpm/@tanstack+start@1.76.1_@types+node@22.7.8_ioredis@5.4.1_react-dom@18.3.1_react@18.3.1___ef9092069f79f3b55405bc0b3508b65c/node_modules/@tanstack/start/dist/esm/client/useServerFn.js
function useServerFn(serverFn) {
  const router = useRouter();
  return async (...args) => {
    try {
      const res = await serverFn(...args);
      if (isRedirect(res)) {
        throw res;
      }
      return res;
    } catch (err) {
      if (isRedirect(err)) {
        router.navigate(
          router.resolveRedirect({
            ...err,
            _fromLocation: router.state.location
          })
        );
      }
      throw err;
    }
  };
}
export {
  Asset,
  Body,
  DehydrateRouter,
  Head,
  Html,
  Meta,
  Scripts,
  StartClient,
  createServerFn,
  json,
  mergeHeaders,
  renderRsc,
  serverFnPayloadTypeHeader,
  serverFnReturnTypeHeader,
  useServerFn
};
//# sourceMappingURL=@tanstack_start.js.map
