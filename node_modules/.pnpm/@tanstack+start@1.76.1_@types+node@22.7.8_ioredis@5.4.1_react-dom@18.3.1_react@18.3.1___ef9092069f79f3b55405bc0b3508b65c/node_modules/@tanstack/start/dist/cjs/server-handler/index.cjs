"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const reactRouter = require("@tanstack/react-router");
const invariant = require("tiny-invariant");
const http = require("vinxi/http");
const manifest = require("vinxi/manifest");
const constants = require("../constants.cjs");
const index = http.eventHandler(handleServerAction);
async function handleServerAction(event) {
  return handleServerRequest(http.toWebRequest(event));
}
async function handleServerRequest(request, event) {
  var _a, _b;
  const method = request.method;
  const url = new URL(request.url, "http://localhost:3000");
  const search = Object.fromEntries(
    new URLSearchParams(url.search).entries()
  );
  const serverFnId = search._serverFnId;
  const serverFnName = search._serverFnName;
  if (!serverFnId || !serverFnName) {
    throw new Error("Invalid request");
  }
  invariant(typeof serverFnId === "string", "Invalid server action");
  if (process.env.NODE_ENV === "development")
    console.info(`ServerFn Request: ${serverFnId} - ${serverFnName}`);
  if (process.env.NODE_ENV === "development") console.info();
  const action = (_b = await ((_a = manifest.getManifest("server").chunks[serverFnId]) == null ? void 0 : _a.import())) == null ? void 0 : _b[serverFnName];
  const response = await (async () => {
    try {
      const args = await (async () => {
        var _a2;
        if (request.headers.get(constants.serverFnPayloadTypeHeader) === "payload") {
          return [
            method.toLowerCase() === "get" ? (() => {
              var _a3;
              return (_a3 = reactRouter.defaultParseSearch(url.search)) == null ? void 0 : _a3.payload;
            })() : await request.json(),
            { method, request }
          ];
        }
        if (request.headers.get(constants.serverFnPayloadTypeHeader) === "formData" || ((_a2 = request.headers.get("Content-Type")) == null ? void 0 : _a2.includes("multipart/form-data"))) {
          return [
            method.toLowerCase() === "get" ? (() => {
              const { _serverFnId, _serverFnName, payload } = search;
              return payload;
            })() : await request.formData(),
            { method, request }
          ];
        }
        if (request.headers.get(constants.serverFnPayloadTypeHeader) === "request") {
          return [request, { method, request }];
        }
        return await request.json();
      })();
      const result = await action(...args);
      if (result instanceof Response) {
        return result;
      }
      if (reactRouter.isRedirect(result) || reactRouter.isNotFound(result)) {
        return redirectOrNotFoundResponse(result);
      }
      return new Response(
        result !== void 0 ? JSON.stringify(result) : void 0,
        {
          status: http.getResponseStatus(http.getEvent()),
          headers: {
            "Content-Type": "application/json",
            [constants.serverFnReturnTypeHeader]: "json"
          }
        }
      );
    } catch (error) {
      if (error instanceof Response) {
        return error;
      }
      if (reactRouter.isRedirect(error) || reactRouter.isNotFound(error)) {
        return redirectOrNotFoundResponse(error);
      }
      console.error("Server Fn Error!");
      console.error(error);
      console.info();
      return new Response(JSON.stringify(error), {
        status: 500,
        headers: {
          "Content-Type": "application/json",
          [constants.serverFnReturnTypeHeader]: "error"
        }
      });
    }
  })();
  if (process.env.NODE_ENV === "development")
    console.info(`ServerFn Response: ${response.status}`);
  if (response.headers.get("Content-Type") === "application/json") {
    const cloned = response.clone();
    const text = await cloned.text();
    const payload = text ? JSON.stringify(JSON.parse(text)) : "undefined";
    if (process.env.NODE_ENV === "development")
      console.info(
        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + "..." : payload}`
      );
  }
  if (process.env.NODE_ENV === "development") console.info();
  return response;
}
function redirectOrNotFoundResponse(error) {
  const { headers, ...rest } = error;
  return new Response(JSON.stringify(rest), {
    status: 200,
    headers: {
      "Content-Type": "application/json",
      [constants.serverFnReturnTypeHeader]: "json",
      ...error.headers || {}
    }
  });
}
exports.default = index;
exports.handleServerRequest = handleServerRequest;
//# sourceMappingURL=index.cjs.map
