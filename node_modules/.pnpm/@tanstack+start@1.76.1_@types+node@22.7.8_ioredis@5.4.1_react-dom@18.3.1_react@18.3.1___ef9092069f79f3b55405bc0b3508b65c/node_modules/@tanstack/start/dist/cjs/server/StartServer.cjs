"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const reactCrossContext = require("@tanstack/react-cross-context");
const reactRouter = require("@tanstack/react-router");
const jsesc = require("jsesc");
const serialization = require("../client/serialization.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
function StartServer(props) {
  props.router.AfterEachMatch = serialization.AfterEachMatch;
  props.router.serializer = (value) => jsesc(value, {
    isScriptContext: true,
    wrap: true,
    json: true
  });
  const hydrationContext = reactCrossContext.Context.get("TanStackRouterHydrationContext", {});
  const hydrationCtxValue = React__namespace.useMemo(
    () => {
      var _a, _b;
      return {
        router: props.router.dehydrate(),
        payload: (_b = (_a = props.router.options).dehydrate) == null ? void 0 : _b.call(_a)
      };
    },
    [props.router]
  );
  return /* @__PURE__ */ jsxRuntime.jsx(hydrationContext.Provider, { value: hydrationCtxValue, children: /* @__PURE__ */ jsxRuntime.jsx(reactRouter.RouterProvider, { router: props.router }) });
}
exports.StartServer = StartServer;
//# sourceMappingURL=StartServer.cjs.map
