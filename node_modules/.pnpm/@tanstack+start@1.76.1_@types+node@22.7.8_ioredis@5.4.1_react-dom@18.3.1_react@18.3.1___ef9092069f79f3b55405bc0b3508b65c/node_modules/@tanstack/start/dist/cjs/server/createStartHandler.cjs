"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const http = require("vinxi/http");
const reactRouter = require("@tanstack/react-router");
const serialization = require("../client/serialization.cjs");
const headers = require("../client/headers.cjs");
const constants = require("../constants.cjs");
function createStartHandler({
  createRouter,
  getRouterManifest
}) {
  return (cb) => {
    return http.eventHandler(async (event) => {
      const request = http.toWebRequest(event);
      const url = new URL(request.url);
      const href = url.href.replace(url.origin, "");
      const history = reactRouter.createMemoryHistory({
        initialEntries: [href]
      });
      const router = createRouter();
      router.serializeLoaderData = serialization.serializeLoaderData;
      if (getRouterManifest) {
        router.manifest = getRouterManifest();
      }
      router.update({
        history
      });
      await router.load();
      const responseHeaders = getRequestHeaders({
        event,
        router
      });
      const response = await cb({
        request,
        router,
        responseHeaders
      });
      return response;
    });
  };
}
function getRequestHeaders(opts) {
  opts.event.__tsrHeadersSent = true;
  let headers$1 = headers.mergeHeaders(
    http.getResponseHeaders(opts.event),
    {
      "Content-Type": "text/html; charset=UTF-8"
    },
    ...opts.router.state.matches.map((match) => {
      return match.headers;
    })
  );
  const { redirect } = opts.router.state;
  if (redirect) {
    headers$1 = headers.mergeHeaders(headers$1, redirect.headers, {
      Location: redirect.href
    });
  }
  [constants.serverFnReturnTypeHeader, constants.serverFnPayloadTypeHeader].forEach((header) => {
    headers$1.delete(header);
  });
  return headers$1;
}
exports.createStartHandler = createStartHandler;
//# sourceMappingURL=createStartHandler.cjs.map
