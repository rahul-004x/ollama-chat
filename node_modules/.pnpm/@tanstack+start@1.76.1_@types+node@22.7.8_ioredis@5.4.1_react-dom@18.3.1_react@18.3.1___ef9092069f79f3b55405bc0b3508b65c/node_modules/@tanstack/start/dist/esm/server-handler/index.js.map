{"version":3,"file":"index.js","sources":["../../../src/server-handler/index.tsx"],"sourcesContent":["/// <reference types=\"vinxi/types/server\" />\nimport {\n  defaultParseSearch,\n  isNotFound,\n  isRedirect,\n} from '@tanstack/react-router'\nimport invariant from 'tiny-invariant'\nimport {\n  eventHandler,\n  getEvent,\n  getResponseStatus,\n  toWebRequest,\n} from 'vinxi/http'\nimport { getManifest } from 'vinxi/manifest'\nimport {\n  serverFnPayloadTypeHeader,\n  serverFnReturnTypeHeader,\n} from '../constants'\nimport type { H3Event } from 'vinxi/server'\n\nexport default eventHandler(handleServerAction)\n\nasync function handleServerAction(event: H3Event) {\n  return handleServerRequest(toWebRequest(event), event)\n}\n\nexport async function handleServerRequest(request: Request, event?: H3Event) {\n  const method = request.method\n  const url = new URL(request.url, 'http://localhost:3000')\n  const search = Object.fromEntries(\n    new URLSearchParams(url.search).entries(),\n  ) as {\n    _serverFnId?: string\n    _serverFnName?: string\n    payload?: any\n  }\n\n  const serverFnId = search._serverFnId\n  const serverFnName = search._serverFnName\n\n  if (!serverFnId || !serverFnName) {\n    throw new Error('Invalid request')\n  }\n\n  invariant(typeof serverFnId === 'string', 'Invalid server action')\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Request: ${serverFnId} - ${serverFnName}`)\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  const action = (await getManifest('server').chunks[serverFnId]?.import())?.[\n    serverFnName\n  ] as Function\n\n  const response = await (async () => {\n    try {\n      const args = await (async () => {\n        if (request.headers.get(serverFnPayloadTypeHeader) === 'payload') {\n          return [\n            method.toLowerCase() === 'get'\n              ? (() => {\n                  return (defaultParseSearch(url.search) as any)?.payload\n                })()\n              : await request.json(),\n            { method, request },\n          ] as const\n        }\n\n        if (\n          request.headers.get(serverFnPayloadTypeHeader) === 'formData' ||\n          request.headers.get('Content-Type')?.includes('multipart/form-data')\n        ) {\n          return [\n            method.toLowerCase() === 'get'\n              ? (() => {\n                  const { _serverFnId, _serverFnName, payload } = search\n                  return payload\n                })()\n              : await request.formData(),\n            { method, request },\n          ] as const\n        }\n\n        if (request.headers.get(serverFnPayloadTypeHeader) === 'request') {\n          return [request, { method, request }] as const\n        }\n\n        // payload type === 'args'\n        return (await request.json()) as Array<any>\n      })()\n\n      const result = await action(...args)\n\n      if (result instanceof Response) {\n        return result\n      }\n\n      // TODO: RSCs\n      // if (isValidElement(result)) {\n      //   const { renderToPipeableStream } = await import(\n      //     // @ts-expect-error\n      //     '@vinxi/react-server-dom/server'\n      //   )\n\n      //   const pipeableStream = renderToPipeableStream(result)\n\n      //   setHeaders(event, {\n      //     'Content-Type': 'text/x-component',\n      //     [serverFnReturnTypeHeader]: 'rsc',\n      //   } as any)\n\n      //   sendStream(event, response)\n      //   event._handled = true\n\n      //   return new Response(null, { status: 200 })\n      // }\n\n      if (isRedirect(result) || isNotFound(result)) {\n        return redirectOrNotFoundResponse(result)\n      }\n\n      return new Response(\n        result !== undefined ? JSON.stringify(result) : undefined,\n        {\n          status: getResponseStatus(getEvent()),\n          headers: {\n            'Content-Type': 'application/json',\n            [serverFnReturnTypeHeader]: 'json',\n          },\n        },\n      )\n    } catch (error: any) {\n      if (error instanceof Response) {\n        return error\n      }\n\n      // Currently this server-side context has no idea how to\n      // build final URLs, so we need to defer that to the client.\n      // The client will check for __redirect and __notFound keys,\n      // and if they exist, it will handle them appropriately.\n\n      if (isRedirect(error) || isNotFound(error)) {\n        return redirectOrNotFoundResponse(error)\n      }\n\n      console.error('Server Fn Error!')\n      console.error(error)\n      console.info()\n\n      return new Response(JSON.stringify(error), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          [serverFnReturnTypeHeader]: 'error',\n        },\n      })\n    }\n  })()\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Response: ${response.status}`)\n\n  if (response.headers.get('Content-Type') === 'application/json') {\n    const cloned = response.clone()\n    const text = await cloned.text()\n    const payload = text ? JSON.stringify(JSON.parse(text)) : 'undefined'\n\n    if (process.env.NODE_ENV === 'development')\n      console.info(\n        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + '...' : payload}`,\n      )\n  }\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  return response\n}\n\nfunction redirectOrNotFoundResponse(error: any) {\n  const { headers, ...rest } = error\n\n  return new Response(JSON.stringify(rest), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      [serverFnReturnTypeHeader]: 'json',\n      ...(error.headers || {}),\n    },\n  })\n}\n"],"names":["_a"],"mappings":"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"}