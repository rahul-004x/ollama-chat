{"version":3,"file":"transformStreamWithRouter.js","sources":["../../../src/server/transformStreamWithRouter.ts"],"sourcesContent":["import { Transform } from 'node:stream'\nimport type { AnyRouter } from '@tanstack/react-router'\n\nexport function transformStreamWithRouter(router: AnyRouter) {\n  const callbacks = transformHtmlCallbacks(() =>\n    router.injectedHtml.map((d) => d()).join(''),\n  )\n  return new Transform({\n    transform(chunk, _encoding, callback) {\n      callbacks\n        .transform(chunk, this.push.bind(this))\n        .then(() => callback())\n        .catch((err) => callback(err))\n    },\n    flush(callback) {\n      callbacks\n        .flush(this.push.bind(this))\n        .then(() => callback())\n        .catch((err) => callback(err))\n    },\n  })\n}\n\nexport function transformReadableStreamWithRouter(router: AnyRouter) {\n  const callbacks = transformHtmlCallbacks(() =>\n    router.injectedHtml.map((d) => d()).join(''),\n  )\n\n  const encoder = new TextEncoder()\n\n  return new TransformStream<string>({\n    transform(chunk, controller) {\n      return callbacks.transform(chunk, (chunkToPush) => {\n        controller.enqueue(encoder.encode(chunkToPush))\n        return true\n      })\n    },\n    flush(controller) {\n      return callbacks.flush((chunkToPush) => {\n        controller.enqueue(chunkToPush)\n        return true\n      })\n    },\n  })\n}\n\n// regex pattern for matching closing body and html tags\nconst patternBodyStart = /(<body)/\nconst patternBodyEnd = /(<\\/body>)/\nconst patternHtmlEnd = /(<\\/html>)/\n\n// regex pattern for matching closing tags\nconst pattern = /(<\\/[a-zA-Z][\\w:.-]*?>)/g\n\nconst textDecoder = new TextDecoder()\n\nfunction transformHtmlCallbacks(getHtml: () => string) {\n  let bodyStarted = false\n  let leftover = ''\n  // If a closing tag is split across chunks, store the HTML to add after it\n  // This expects that all the HTML that's added is closed properly\n  let leftoverHtml = ''\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async transform(chunk: any, push: (chunkToPush: string) => boolean) {\n      const chunkString = leftover + textDecoder.decode(chunk)\n\n      const bodyStartMatch = chunkString.match(patternBodyStart)\n      const bodyEndMatch = chunkString.match(patternBodyEnd)\n      const htmlEndMatch = chunkString.match(patternHtmlEnd)\n\n      try {\n        if (bodyStartMatch) {\n          bodyStarted = true\n        }\n\n        if (!bodyStarted) {\n          push(chunkString)\n          leftover = ''\n          return\n        }\n\n        const html = getHtml()\n\n        // If a </body></html> sequence was found\n        if (\n          bodyEndMatch &&\n          htmlEndMatch &&\n          bodyEndMatch.index! < htmlEndMatch.index!\n        ) {\n          const bodyIndex = bodyEndMatch.index! + bodyEndMatch[0].length\n          const htmlIndex = htmlEndMatch.index! + htmlEndMatch[0].length\n\n          // Add the arbitrary HTML before the closing body tag\n          const processed =\n            chunkString.slice(0, bodyIndex) +\n            html +\n            chunkString.slice(bodyIndex, htmlIndex) +\n            chunkString.slice(htmlIndex)\n\n          push(processed)\n          leftover = ''\n        } else {\n          // For all other closing tags, add the arbitrary HTML after them\n          let result\n          let lastIndex = 0\n\n          while ((result = pattern.exec(chunkString)) !== null) {\n            lastIndex = result.index + result[0].length\n          }\n\n          // If a closing tag was found, add the arbitrary HTML and send it through\n          if (lastIndex > 0) {\n            const processed =\n              chunkString.slice(0, lastIndex) + html + leftoverHtml\n            push(processed)\n            leftover = chunkString.slice(lastIndex)\n          } else {\n            // If no closing tag was found, store the chunk to process with the next one\n            leftover = chunkString\n            leftoverHtml += html\n          }\n        }\n      } catch (err) {\n        console.error(err)\n        throw err\n      }\n    },\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async flush(push: (chunkToPush: string) => boolean) {\n      if (leftover) {\n        push(leftover)\n      }\n    },\n  }\n}\n"],"names":[],"mappings":"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"}